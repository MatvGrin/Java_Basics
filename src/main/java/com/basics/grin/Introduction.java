package com.basics.grin;

public class Introduction {
    public static void main(String[] args) {
        byte b = 7;//Автоматически без потери точности производятся расширяющие преобразования (widening) – это преобразования, которые расширяют представление объекта в памяти.
        int d = b;
        int a = 2_147_483_647;//Существуют преобразования, которые могут выполняться автоматически между типами данных с одинаковой разрядностью или от типа с большей разрядностью к типу с меньшей разрядностью. Например, следующие цепочки преобразований: int в float, long в float и long в double производятся без ошибок, но во время преобразований может случиться потеря данных.
        float b1 = a;
        System.out.println(b1);

        int valueInt = 34_567;//При сужающем приведении одного целого числа к другому целому типу отбрасываются все биты, кроме n младших разрядов (где n – это число битов для представления типа, к которому приводим). При этом возможны:
        //потеря данных о величине значения
        //изменение знака результирующего значения.
        short valueShort = (short) valueInt;
        System.out.println(valueInt + " -> " + valueShort);

        double valDouble = 1.0e-46;//Сужающее преобразование из типа double в тип float регулируется правилами округления IEEE 754. При этом может произойти:
        //1)потеря точности
        //2)потеря диапазона (например, нулевое значение типа float может получиться из ненулевого double, а бесконечное значение типа float – из конечного double).
        float valFloat = (float) valDouble;
        System.out.println(valDouble + " -> " + valFloat);

        byte b3 = 50;//При использовании операций инкремент (++) и декремент (--), а также сокращенной формы операторов: (+=, /=, */ и т.д.).
        int iVal = -100;
        b3 += iVal--;

        //В исходном коде есть такая строка кода:
        byte b2 = 2 + 3;
        //Но тратить время выполнения программы на подсчет суммы двух инвариантных литералов не оптимально, поэтому это делается на этапе компиляции кода, и в байт-код попадет следующее:
        //byte b2 = 5;
        //Это также касается и финализированных переменных:
        final int X = 7;
        int y1 = 12 + X;
        //Так как значение финализированной переменной не меняется, то последняя строка в байт-коде будет записана следующим образом:
        //int y1 = 19;
    }
}
